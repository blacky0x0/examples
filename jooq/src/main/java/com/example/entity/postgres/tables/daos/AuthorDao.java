/**
 * This class is generated by jOOQ
 */
package com.example.entity.postgres.tables.daos;


import com.example.entity.postgres.tables.Author;
import com.example.entity.postgres.tables.records.AuthorRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AuthorDao extends DAOImpl<AuthorRecord, com.example.entity.postgres.tables.pojos.Author, Integer> {

	/**
	 * Create a new AuthorDao without any configuration
	 */
	public AuthorDao() {
		super(Author.AUTHOR, com.example.entity.postgres.tables.pojos.Author.class);
	}

	/**
	 * Create a new AuthorDao with an attached configuration
	 */
	@Autowired
	public AuthorDao(Configuration configuration) {
		super(Author.AUTHOR, com.example.entity.postgres.tables.pojos.Author.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(com.example.entity.postgres.tables.pojos.Author object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public List<com.example.entity.postgres.tables.pojos.Author> fetchById(Integer... values) {
		return fetch(Author.AUTHOR.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public com.example.entity.postgres.tables.pojos.Author fetchOneById(Integer value) {
		return fetchOne(Author.AUTHOR.ID, value);
	}

	/**
	 * Fetch records that have <code>name IN (values)</code>
	 */
	public List<com.example.entity.postgres.tables.pojos.Author> fetchByName(String... values) {
		return fetch(Author.AUTHOR.NAME, values);
	}
}
